import web
import psutil
import json
import docker
import command
import subprocess
import logging
import threading
import time
import ConfigParser

urls = (
    '/cpu', 'cpu',
    '/ram', 'ram',
    '/containers', 'containers',
    '/temperature', 'temp',
    '/reboot', 'reboot'
)
app = web.application(urls, globals())


def prepare_message(message):
    web.header('Content-Type', 'application/json')
    return json.dumps(message)


class config:

    def __init__(self):
        self.reboot_delay = 5  # default 5 seconds
        self.refresh_config()

    def refresh_config(self):
        parser = ConfigParser.SafeConfigParser()
        try:
            parser.read("hbclient.cfg")
            self.reboot_delay = parser.getint("util", "reboot_delay")
        except ConfigParser.ParsingError, e:
            logging.error("parsing config failed")
            logging.exception(e)
            return
        except ConfigParser.NoSectionError, e:
            logging.error("parsing config, section not found")
            logging.exception(e)
            return


class containers:

    def GET(self):
        containers = None
        try:
	    client = docker.Client(base_url='unix://var/run/docker.sock',version='1.6',timeout=10)
            containers = client.containers(all=True)
        except Exception as e:
            logging.error("Containers unavailable")
            logging.exception(e)
            containers = None           
        return prepare_message(containers)


class cpu:

    def GET(self):
        utilisation = psutil.cpu_times_percent(interval=1)
        return prepare_message(utilisation)


class ram:

    def GET(self):
        ram_total = psutil.virtual_memory().total
        ram_used = psutil.virtual_memory().used
        ram_dict = {'ram_total': ram_total, 'ram_used': ram_used}
        return prepare_message(ram_dict)
    
        
class temp:
    
    def GET(self):
        com = command.Command(["cat", "/sys/class/thermal/thermal_zone0/temp"])
        temp = None
        try:
            temp = com.execute(return_output=True).get("comm_retval")
            temp = int(temp)
        except Exception, e:
            logging.error("temperature command error")
            logging.exception(e)
            return None
        return prepare_message(temp)
        

class rebootThread(threading.Thread):

    def __init__(self, delay):
        threading.Thread.__init__(self)
        self.delay = delay

    def run(self):
        time.sleep(self.delay)
        logging.info("rebooting NOW")
        subprocess.call(['reboot'])


class reboot:

    def GET(self):
        logging.info("reboot request received")
        cfg = config()
        t = rebootThread(cfg.reboot_delay)
        t.start()
        return prepare_message("Rebooting in {} seconds".format(cfg.reboot_delay))

if __name__ == "__main__":
    logging.basicConfig(filename='client.log', level=logging.INFO)
    logging.info("rmt_client started")
    app.run()
    logging.info("rmt_client stopped")
